diff --git a/framework/src/bundle/Bundle.cpp b/framework/src/bundle/Bundle.cpp
index 47183e55..344cc9d1 100644
--- a/framework/src/bundle/Bundle.cpp
+++ b/framework/src/bundle/Bundle.cpp
@@ -282,9 +282,9 @@ namespace cppmicroservices
         std::vector<ServiceRegistrationBase> sr;
         std::vector<ServiceReferenceU> res;
         d->coreCtx->services.GetRegisteredByBundle(d.get(), sr);
-        for (std::vector<ServiceRegistrationBase>::const_iterator i = sr.begin(); i != sr.end(); ++i)
+        for (const auto& registration : sr)
         {
-            res.emplace_back(i->GetReference());
+            res.emplace_back(registration.GetReference());
         }
         return res;
     }
@@ -301,9 +301,9 @@ namespace cppmicroservices
         std::vector<ServiceRegistrationBase> sr;
         std::vector<ServiceReferenceU> res;
         d->coreCtx->services.GetUsedByBundle(d.get(), sr);
-        for (std::vector<ServiceRegistrationBase>::const_iterator i = sr.begin(); i != sr.end(); ++i)
+        for (const auto& registration : sr)
         {
-            res.emplace_back(i->GetReference());
+            res.emplace_back(registration.GetReference());
         }
         return res;
     }
diff --git a/framework/src/bundle/BundleArchive.cpp b/framework/src/bundle/BundleArchive.cpp
index 6f3350d1..bba154af 100644
--- a/framework/src/bundle/BundleArchive.cpp
+++ b/framework/src/bundle/BundleArchive.cpp
@@ -114,12 +114,12 @@ namespace cppmicroservices
     {
         if (!resourceContainer)
         {
-            return BundleResource();
+            return {};
         }
         BundleResource result(path, this->shared_from_this());
         if (result)
             return result;
-        return BundleResource();
+        return {};
     }
 
     std::vector<BundleResource>
diff --git a/framework/src/bundle/BundleContext.cpp b/framework/src/bundle/BundleContext.cpp
index e64fc596..f1338346 100644
--- a/framework/src/bundle/BundleContext.cpp
+++ b/framework/src/bundle/BundleContext.cpp
@@ -221,7 +221,7 @@ namespace cppmicroservices
 
         std::vector<ServiceReferenceBase> refs;
         b->coreCtx->services.Get(clazz, filter, b.get(), refs);
-        return std::vector<ServiceReferenceU>(refs.begin(), refs.end());
+        return {refs.begin(), refs.end()};
     }
 
     ServiceReferenceU
@@ -256,7 +256,7 @@ namespace cppmicroservices
         auto b = GetAndCheckBundlePrivate(d);
         auto serviceHolder = new ServiceHolder<void>(b, reference, reference.d.Load()->GetService(b.get()), nullptr);
         std::shared_ptr<ServiceHolder<void>> h(serviceHolder, CustomServiceDeleter { serviceHolder });
-        return std::shared_ptr<void>(h, h->service.get());
+        return {h, h->service.get()};
     }
 
     InterfaceMapConstPtr
@@ -279,7 +279,7 @@ namespace cppmicroservices
         auto serviceInterfaceMap = reference.d.Load()->GetServiceInterfaceMap(b.get());
         std::shared_ptr<ServiceHolder<InterfaceMap const>> h(
             new ServiceHolder<InterfaceMap const>(b, reference, serviceInterfaceMap, nullptr));
-        return InterfaceMapConstPtr(h, h->service.get());
+        return {h, h->service.get()};
     }
 
     ListenerToken
@@ -456,7 +456,7 @@ namespace cppmicroservices
             }
             return dataRoot + util::DIR_SEP + filename;
         }
-        return std::string();
+        return {};
     }
 
     std::vector<Bundle>
diff --git a/framework/src/bundle/BundleContextPrivate.cpp b/framework/src/bundle/BundleContextPrivate.cpp
index 9deed09b..5c121870 100644
--- a/framework/src/bundle/BundleContextPrivate.cpp
+++ b/framework/src/bundle/BundleContextPrivate.cpp
@@ -45,13 +45,13 @@ namespace cppmicroservices
     BundleContext
     MakeBundleContext(BundleContextPrivate* d)
     {
-        return BundleContext(d->shared_from_this());
+        return {d->shared_from_this()};
     }
 
     BundleContext
     MakeBundleContext(std::shared_ptr<BundleContextPrivate> const& d)
     {
-        return BundleContext(d);
+        return {d};
     }
 
     US_Framework_EXPORT std::shared_ptr<BundleContextPrivate>
diff --git a/framework/src/bundle/BundleEventInternal.h b/framework/src/bundle/BundleEventInternal.h
index 40b139c1..51849640 100644
--- a/framework/src/bundle/BundleEventInternal.h
+++ b/framework/src/bundle/BundleEventInternal.h
@@ -45,7 +45,7 @@ namespace cppmicroservices
     inline BundleEvent
     MakeBundleEvent(BundleEventInternal const& be)
     {
-        return BundleEvent(be.type, MakeBundle(be.bundle));
+        return {be.type, MakeBundle(be.bundle)};
     }
 } // namespace cppmicroservices
 
diff --git a/framework/src/bundle/BundleManifest.cpp b/framework/src/bundle/BundleManifest.cpp
index 802c9577..f0e30342 100644
--- a/framework/src/bundle/BundleManifest.cpp
+++ b/framework/src/bundle/BundleManifest.cpp
@@ -104,22 +104,22 @@ namespace cppmicroservices
                 if (!val.empty() && val[0] == '%')
                     val = val.substr(1);
 
-                return Any(val);
+                return {val};
             }
             else if (jsonValue.IsBool())
             {
-                return Any(jsonValue.GetBool());
+                return {jsonValue.GetBool()};
             }
             else if (jsonValue.IsInt())
             {
-                return Any(jsonValue.GetInt());
+                return {jsonValue.GetInt()};
             }
             else if (jsonValue.IsDouble())
             {
-                return Any(jsonValue.GetDouble());
+                return {jsonValue.GetDouble()};
             }
 
-            return Any();
+            return {};
         }
 
         void
@@ -165,7 +165,7 @@ namespace cppmicroservices
 
     BundleManifest::BundleManifest() : m_Headers(AnyMap::UNORDERED_MAP_CASEINSENSITIVE_KEYS) {}
 
-    BundleManifest::BundleManifest(AnyMap const& m) : m_Headers(m) {}
+    BundleManifest::BundleManifest(AnyMap m) : m_Headers(std::move(m)) {}
 
     void
     BundleManifest::Parse(std::istream& is)
@@ -205,7 +205,7 @@ namespace cppmicroservices
         {
             return iter->second;
         }
-        return Any();
+        return {};
     }
 
     void
diff --git a/framework/src/bundle/BundleManifest.h b/framework/src/bundle/BundleManifest.h
index 268ef109..d0aa690a 100644
--- a/framework/src/bundle/BundleManifest.h
+++ b/framework/src/bundle/BundleManifest.h
@@ -35,7 +35,7 @@ namespace cppmicroservices
 
       public:
         BundleManifest();
-        explicit BundleManifest(AnyMap const& m);
+        explicit BundleManifest(AnyMap m);
 
         void Parse(std::istream& is);
 
diff --git a/framework/src/bundle/BundlePrivate.cpp b/framework/src/bundle/BundlePrivate.cpp
index 7823657f..074b72dc 100644
--- a/framework/src/bundle/BundlePrivate.cpp
+++ b/framework/src/bundle/BundlePrivate.cpp
@@ -60,7 +60,7 @@ namespace cppmicroservices
     Bundle
     MakeBundle(std::shared_ptr<BundlePrivate> const& d)
     {
-        return Bundle(d);
+        return {d};
     }
 
     void
@@ -438,7 +438,7 @@ namespace cppmicroservices
 
         if ((options & Bundle::START_TRANSIENT) == 0)
         {
-            SetAutostartSetting(options);
+            SetAutostartSetting(static_cast<int32_t>(options));
         }
 
         FinalizeActivation();
@@ -826,23 +826,24 @@ namespace cppmicroservices
             {
                 sr.Unregister();
             }
-            catch (std::logic_error const& /*ignore*/)
+            catch (std::logic_error const& ex/*ignore*/)
             {
                 // Someone has unregistered the service after stop completed.
                 // This should not occur, but we don't want get stuck in
                 // an illegal state so we catch it.
+                (void)ex;
             }
         }
 
         srs.clear();
         coreCtx->services.GetUsedByBundle(this, srs);
-        for (std::vector<ServiceRegistrationBase>::const_iterator i = srs.begin(); i != srs.end(); ++i)
+        for (const auto& i : srs)
         {
             // wrap in try-catch to catch failures if service is already unregistered
             // if service is unregistered, all work in UngetService is already done by Unregister() previously
             try
             {
-                auto ref = i->GetReference(std::string());
+                auto ref = i.GetReference(std::string());
                 ref.d.Load()->UngetService(this->shared_from_this(), false);
             }
             catch (...)
diff --git a/framework/src/bundle/BundleResource.cpp b/framework/src/bundle/BundleResource.cpp
index eb99c76b..0da5284c 100644
--- a/framework/src/bundle/BundleResource.cpp
+++ b/framework/src/bundle/BundleResource.cpp
@@ -43,7 +43,7 @@ namespace cppmicroservices
 
         void InitFilePath(std::string const& file);
 
-        const std::shared_ptr<BundleArchive const> archive;
+        std::shared_ptr<BundleArchive const> archive;
 
         BundleResourceContainer::Stat stat;
 
@@ -98,7 +98,7 @@ namespace cppmicroservices
 
     BundleResource::BundleResource() : d(std::make_shared<BundleResourcePrivate>(nullptr)) {}
 
-    BundleResource::BundleResource(BundleResource const& resource) : d(resource.d) {}
+    BundleResource::BundleResource(BundleResource const& resource) = default;
 
     BundleResource::BundleResource(std::string const& file, std::shared_ptr<BundleArchive const> const& archive)
         : d(std::make_shared<BundleResourcePrivate>(archive))
@@ -241,11 +241,9 @@ namespace cppmicroservices
         if (!IsValid() || !IsDir())
             return childResources;
 
-        for (std::vector<uint32_t>::const_iterator iter = d->childNodes.begin(), iterEnd = d->childNodes.end();
-             iter != iterEnd;
-             ++iter)
+        for (const auto& childId : d->childNodes)
         {
-            childResources.push_back(BundleResource(static_cast<int>(*iter), d->archive));
+            childResources.push_back(BundleResource(static_cast<int>(childId), d->archive));
         }
         return childResources;
     }
diff --git a/framework/src/bundle/BundleResourceBuffer.cpp b/framework/src/bundle/BundleResourceBuffer.cpp
index abc521c6..1e37e7b4 100644
--- a/framework/src/bundle/BundleResourceBuffer.cpp
+++ b/framework/src/bundle/BundleResourceBuffer.cpp
@@ -26,37 +26,35 @@
 #include <cstdint>
 #include <cstdlib>
 #include <limits>
+#include <utility>
 #include <memory>
 
 #ifdef US_PLATFORM_WINDOWS
-#    define DATA_NEEDS_NEWLINE_CONVERSION 1
-#    undef REMOVE_LAST_NEWLINE_IN_TEXT_MODE
+    constexpr bool DATA_NEEDS_NEWLINE_CONVERSION = true;
+    constexpr bool REMOVE_LAST_NEWLINE_IN_TEXT_MODE = false;
 #else
-#    undef DATA_NEEDS_NEWLINE_CONVERSION
-#    define REMOVE_LAST_NEWLINE_IN_TEXT_MODE 1
+    constexpr bool DATA_NEEDS_NEWLINE_CONVERSION = false;
+    constexpr bool REMOVE_LAST_NEWLINE_IN_TEXT_MODE = true;
 #endif
 
-namespace cppmicroservices
+namespace cppmicroservices::detail
 {
 
-    namespace detail
-    {
-
         class BundleResourceBufferPrivate
         {
-          public:
+            public:
             BundleResourceBufferPrivate(std::unique_ptr<void, void (*)(void*)> data,
                                         std::size_t size,
                                         char const* begin,
                                         std::ios_base::openmode mode)
                 : begin(begin)
-                , end(begin + size)
+                , end(std::next(begin, static_cast<std::ptrdiff_t>(size)))
                 , current(begin)
                 , mode(mode)
                 , uncompressedData(reinterpret_cast<unsigned char*>(data.release()), data.get_deleter())
-#ifdef DATA_NEEDS_NEWLINE_CONVERSION
+    #ifdef DATA_NEEDS_NEWLINE_CONVERSION
                 , pos(0)
-#endif
+    #endif
             {
             }
 
@@ -68,36 +66,37 @@ namespace cppmicroservices
 
             std::unique_ptr<unsigned char, void (*)(void*)> uncompressedData;
 
-#ifdef DATA_NEEDS_NEWLINE_CONVERSION
+    #ifdef DATA_NEEDS_NEWLINE_CONVERSION
             // records the stream position ignoring CR characters
             std::streambuf::pos_type pos;
-#endif
+    #endif
         };
 
         BundleResourceBuffer::BundleResourceBuffer(std::unique_ptr<void, void (*)(void*)> data,
-                                                   std::size_t _size,
-                                                   std::ios_base::openmode mode)
+                                                    std::size_t _size,
+                                                    std::ios_base::openmode mode)
             : d(nullptr)
         {
             assert(_size < static_cast<std::size_t>(std::numeric_limits<uint32_t>::max()));
 
-            auto* begin = reinterpret_cast<char*>(data.get());
+            auto* begin = static_cast<char*>(data.get());
             std::size_t size = begin ? _size : 0;
 
-#ifdef DATA_NEEDS_NEWLINE_CONVERSION
+    #ifdef DATA_NEEDS_NEWLINE_CONVERSION
             if (begin != nullptr && !(mode & std::ios_base::binary) && begin[0] == '\r')
             {
                 ++begin;
                 --size;
             }
-#endif
+    #endif
 
-#ifdef REMOVE_LAST_NEWLINE_IN_TEXT_MODE
-            if (begin != nullptr && !(mode & std::ios_base::binary) && begin[size - 1] == '\n')
+    #ifdef REMOVE_LAST_NEWLINE_IN_TEXT_MODE
+            const char* end = std::next(begin, size);
+            if (begin != nullptr && !(mode & std::ios_base::binary) && *std::prev(end) == '\n')
             {
                 --size;
             }
-#endif
+    #endif
 
             d = std::make_unique<BundleResourceBufferPrivate>(std::move(data), size, begin, mode);
         }
@@ -110,7 +109,7 @@ namespace cppmicroservices
             if (d->current == d->end)
                 return traits_type::eof();
 
-#ifdef DATA_NEEDS_NEWLINE_CONVERSION
+    #ifdef DATA_NEEDS_NEWLINE_CONVERSION
             char c = *d->current;
             if (!(d->mode & std::ios_base::binary))
             {
@@ -124,9 +123,9 @@ namespace cppmicroservices
                 }
             }
             return traits_type::to_int_type(c);
-#else
+    #else
             return traits_type::to_int_type(*d->current);
-#endif
+    #endif
         }
 
         BundleResourceBuffer::int_type
@@ -135,7 +134,7 @@ namespace cppmicroservices
             if (d->current == d->end)
                 return traits_type::eof();
 
-#ifdef DATA_NEEDS_NEWLINE_CONVERSION
+    #ifdef DATA_NEEDS_NEWLINE_CONVERSION
             char c = *d->current++;
             if (!(d->mode & std::ios_base::binary))
             {
@@ -149,16 +148,16 @@ namespace cppmicroservices
                 }
             }
             return traits_type::to_int_type(c);
-#else
-            return traits_type::to_int_type(*d->current++);
-#endif
+    #else
+            return traits_type::to_int_type(*std::exchange(d->current, std::next(d->current)));
+    #endif
         }
 
         BundleResourceBuffer::int_type
         BundleResourceBuffer::pbackfail(int_type ch)
         {
             int backOffset = -1;
-#ifdef DATA_NEEDS_NEWLINE_CONVERSION
+    #ifdef DATA_NEEDS_NEWLINE_CONVERSION
             if (!(d->mode & std::ios_base::binary))
             {
                 while ((d->current - backOffset) >= d->begin && d->current[backOffset] == '\r')
@@ -167,7 +166,7 @@ namespace cppmicroservices
                 }
                 // d->begin always points to a character != '\r'
             }
-#endif
+    #endif
             if (d->current == d->begin || (ch != traits_type::eof() && ch != d->current[backOffset]))
             {
                 return traits_type::eof();
@@ -182,7 +181,7 @@ namespace cppmicroservices
         {
             assert(d->current <= d->end);
 
-#ifdef DATA_NEEDS_NEWLINE_CONVERSION
+    #ifdef DATA_NEEDS_NEWLINE_CONVERSION
             std::streamsize ssize = 0;
             std::size_t chunkSize = d->end - d->current;
             for (std::size_t i = 0; i < chunkSize; ++i)
@@ -193,17 +192,17 @@ namespace cppmicroservices
                 }
             }
             return ssize;
-#else
+    #else
             return d->end - d->current;
-#endif
+    #endif
         }
 
         std::streambuf::pos_type
         BundleResourceBuffer::seekoff(std::streambuf::off_type off,
-                                      std::ios_base::seekdir way,
-                                      std::ios_base::openmode /*which*/)
+                                        std::ios_base::seekdir way,
+                                        std::ios_base::openmode /*which*/)
         {
-#ifdef DATA_NEEDS_NEWLINE_CONVERSION
+    #ifdef DATA_NEEDS_NEWLINE_CONVERSION
             std::streambuf::off_type step = 1;
             if (way == std::ios_base::beg)
             {
@@ -262,23 +261,25 @@ namespace cppmicroservices
                 d->pos = d->current - d->begin;
             }
             return d->pos;
-#else
+    #else
             if (way == std::ios_base::beg)
             {
-                d->current = d->begin + off;
+                d->current = d->begin;
+                std::advance(d->current, off);
                 return off;
             }
             else if (way == std::ios_base::cur)
             {
-                d->current += off;
-                return d->current - d->begin;
+                std::advance(d->current, off);
+                return std::distance(d->begin, d->current);
             }
             else
             {
-                d->current = d->end + off;
-                return d->current - d->begin;
+                d->current = d->end;
+                std::advance(d->current, off);
+                return std::distance(d->begin, d->current);
             }
-#endif
+    #endif
         }
 
         std::streambuf::pos_type
@@ -287,6 +288,4 @@ namespace cppmicroservices
             return this->seekoff(sp, std::ios_base::beg);
         }
 
-    } // namespace detail
-
-} // namespace cppmicroservices
+} // namespace cppmicroservices::detail
diff --git a/framework/src/bundle/BundleUtils.cpp b/framework/src/bundle/BundleUtils.cpp
index b2607eba..6465d9be 100644
--- a/framework/src/bundle/BundleUtils.cpp
+++ b/framework/src/bundle/BundleUtils.cpp
@@ -71,10 +71,7 @@ dlsym(void* handle, char const* symbol)
 
 #endif
 
-namespace cppmicroservices
-{
-
-    namespace BundleUtils
+namespace cppmicroservices::BundleUtils
     {
 
         void*
@@ -96,7 +93,4 @@ namespace cppmicroservices
             }
             return addr;
         }
-
-    } // namespace BundleUtils
-
-} // namespace cppmicroservices
+} // namespace cppmicroservices::BundleUtils
diff --git a/framework/src/bundle/BundleVersion.cpp b/framework/src/bundle/BundleVersion.cpp
index 33355de2..1685730d 100644
--- a/framework/src/bundle/BundleVersion.cpp
+++ b/framework/src/bundle/BundleVersion.cpp
@@ -168,7 +168,7 @@ namespace cppmicroservices
             return EmptyVersion();
         }
 
-        return BundleVersion(version2);
+        return {version2};
     }
 
     bool
diff --git a/framework/src/bundle/Constants.cpp b/framework/src/bundle/Constants.cpp
index 51eb2b0d..f9b9b9bf 100644
--- a/framework/src/bundle/Constants.cpp
+++ b/framework/src/bundle/Constants.cpp
@@ -22,10 +22,7 @@
 
 #include "cppmicroservices/Constants.h"
 
-namespace cppmicroservices
-{
-
-    namespace Constants
+namespace cppmicroservices::Constants
     {
 
         const std::string SYSTEM_BUNDLE_LOCATION = "System Bundle";
@@ -69,5 +66,4 @@ namespace cppmicroservices
         const std::string SCOPE_PROTOTYPE = "prototype";
         const std::string LIBRARY_LOAD_OPTIONS = "org.cppmicroservices.library.load.options";
 
-    } // namespace Constants
-} // namespace cppmicroservices
+} // namespace cppmicroservices::Constants
diff --git a/framework/src/bundle/CoreBundleContext.cpp b/framework/src/bundle/CoreBundleContext.cpp
index bb173342..2616ce46 100644
--- a/framework/src/bundle/CoreBundleContext.cpp
+++ b/framework/src/bundle/CoreBundleContext.cpp
@@ -249,7 +249,7 @@ namespace cppmicroservices
         {
             return dataStorage + util::DIR_SEP + util::ToString(id);
         }
-        return std::string();
+        return {};
     }
 
     WriteLock
