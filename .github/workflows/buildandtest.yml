name: BuildAndTest

on:
  push:
    branches: [ development, master ]
  pull_request:
    branches: [ development ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_DIR: ${{github.workspace}}/build
  BUILD_CONFIGURATION: 0
  WITH_COVERAGE: 1
  MY_COVERAGE: gcov

jobs:
  minimum_supported_gcc_build:
    name: Build and test on minimum supported gcc compiler
    runs-on: ubuntu-18.04
    env:
       BUILD_CONFIGURATION: 0
       WITH_COVERAGE: 0

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install dependencies
      run: |
        sudo apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
        sudo apt-get update
        sudo apt-get -yq --no-install-suggests --no-install-recommends install gcc-5 g++-5 valgrind
      
    - name: Configure Build and Test
      run: ctest -VV -S ${{github.workspace}}/cmake/usCTestScript_github.cmake
      env:
         CC: gcc-5
         CXX: g++-5

  linux_clang_build:
    name: Build and test on supported clang compiler
    runs-on: ubuntu-18.04
    env:
      BUILD_CONFIGURATION: 0
      WITH_COVERAGE: 0

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install dependencies
      run: sudo apt-get -yq --no-install-suggests --no-install-recommends install valgrind lld
      
    - name: Configure Build and Test
      run: ctest -VV -S ${{github.workspace}}/cmake/usCTestScript_github.cmake
      env:
         CC: clang
         CXX: clang++
  
  build_nix:
    name: Build and test on ${{matrix.os}} with build configuration ${{matrix.buildconfiguration}} 
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macOS-latest]
        # build configurations:
        # 0 = threading ON / shared lib ON
        # 1 = threading ON / shared lib OFF
        # 2 = threading OFF / shared lib ON
        # 3 = threading OFF/ shared lib OFF
        buildconfiguration: [0,1,2,3]

    steps:
    - uses: actions/checkout@v2
      with:
         submodules: true

    - name: Install valgrind
      run: sudo apt-get install -y valgrind
      if: ${{matrix.os == 'ubuntu-18.04'}}

    - name: Configure Build And Test
      run: ctest -VV -S ${{github.workspace}}/cmake/usCTestScript_github.cmake
      env: 
         BUILD_CONFIGURATION: ${{matrix.buildconfiguration}}
      
    - name: Code Coverage
      run: bash <(curl -s https://codecov.io/bash) -X gcov -s ${{github.workspace}}/build
  
  build_win_coverage:
    name: Build and test on ${{matrix.os}} with build configuration ${{matrix.buildconfiguration}} with code coverage
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2016, windows-2019]
        # build configurations:
        # 0 = threading ON / shared lib ON
        # 1 = threading ON / shared lib OFF
        buildconfiguration: [0,1]

    steps:
      - name: Initialization
        run: |
          git config --global core.autocrlf true
          subst Z: ${{github.workspace}}

      - uses: actions/checkout@v2
        with:
          submodules: true

      # Install OpenCppCoverage for windows builds and add it to the path so CMake and CTest can find it and use
      # it for generation of code coverage files
      - name: Install OpenCppCoverage
        run: |
          choco install opencppcoverage

      - name: Configure Build And Test
        shell: cmd
        run: |
          set PATH=%PATH%;"C:\Program Files\OpenCppCoverage"
          Z:
          ctest -VV -S cmake\usCTestScript_github.cmake
        env:
          BUILD_DIR: Z:\build\config_${{matrix.buildconfiguration}}
          BUILD_CONFIGURATION: ${{matrix.buildconfiguration}}
          BUILD_TYPE: Debug
          GITHUB_BUILD_OS: ${{matrix.os}}

      # Merge the generated code coverage reports and fix the file paths using the script files we have in our
      # repo
      - name: Code Coverage Preprocessing
        shell: cmd
        run: |
          set PATH=%PATH%;"C:\Program Files\OpenCppCoverage"
          Z:
          cd build\config_${{matrix.buildconfiguration}}
          Z:\opencppcoverage_mergereports.bat
          python Z:\fixcoveragefilepaths.py -i coverage.xml -s Z:\ -o coverage_pathsfixed.xml

      # Actually send the fixed coverage information to CodeCov.
      - name: Submit Code Coverage Data
        shell: pwsh
        run: |
          Z:
          cd build\config_${{matrix.buildconfiguration}}
          $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
          Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
          bash codecov.sh -f "./coverage_pathsfixed.xml" -U "-s" -A "-s"

  build_win:
    name: Build and test on ${{matrix.os}} with build configuration ${{matrix.buildconfiguration}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2016, windows-2019]
        # build configurations:
        # 0 = threading ON / shared lib ON
        # 1 = threading ON / shared lib OFF
        # 2 = threading OFF / shared lib ON
        # 3 = threading OFF/ shared lib OFF
        buildconfiguration: [0,1,2,3]

    steps:
    - name: Initialization
      run: |
        git config --global core.autocrlf true
        subst Z: ${{github.workspace}}

    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Configure Build And Test
      run: |
        Z:
        ctest -VV -S cmake\usCTestScript_github.cmake
      env:
        BUILD_DIR: Z:\build
        BUILD_CONFIGURATION: ${{matrix.buildconfiguration}}
        GITHUB_BUILD_OS: ${{matrix.os}}
        WITH_COVERAGE: 0
