diff --git a/third_party/miniz.c b/third_party/miniz.c
index 16efc6e1..18c73670 100755
--- a/third_party/miniz.c
+++ b/third_party/miniz.c
@@ -2853,43 +2853,31 @@ void *tdefl_write_image_to_png_file_in_memory(const void *pImage, int w, int h,
     #include <Windows.h>
     #include <stringapiset.h>
     #include <wchar.h>
-    
-    // return NULL if inStr is NULL or if the conversion failed
-    // The string returned is allocated using 'malloc' and hence should be de-allocated using 'free'.
-    static wchar_t* utf8_to_wchar(const char* inStr)
+
+    static WCHAR* mz_utf8z_to_widechar(const char* str)
     {
-      wchar_t* wstr = NULL;
-      if (inStr)
-      {
-        int wchars_count = MultiByteToWideChar(CP_UTF8, 0, inStr, -1, NULL, 0);
-        if (wchars_count > 0)
-        {
-          wstr = MZ_MALLOC(sizeof(wchar_t)*(wchars_count));
-        }
-        if ((wstr != NULL) && (MultiByteToWideChar(CP_UTF8, 0, inStr, -1, wstr, wchars_count) == 0))
-        {
-          MZ_FREE(wstr);
-          wstr = NULL;
-        }
-      }
-      return wstr;
+        int reqChars = MultiByteToWideChar(CP_UTF8, 0, str, -1, NULL, 0);
+        WCHAR* wStr = (WCHAR*)malloc(reqChars * sizeof(WCHAR));
+        MultiByteToWideChar(CP_UTF8, 0, str, -1, wStr, sizeof(WCHAR) * reqChars);
+        return wStr;
     }
 
     static FILE *mz_fopen(const char *pFilename, const char *pMode)
     {
-      FILE* pFile = NULL;
-      wchar_t* pFilenameW = utf8_to_wchar(pFilename);
-      wchar_t* pModeW = utf8_to_wchar(pMode);
-     (void)_wfopen_s(&pFile, pFilenameW, pModeW);
-      MZ_FREE(pFilenameW);
-      MZ_FREE(pModeW);
-      return pFile;
+        WCHAR* wFilename = mz_utf8z_to_widechar(pFilename);
+        WCHAR* wMode = mz_utf8z_to_widechar(pMode);
+        FILE* pFile = NULL;
+        errno_t err = _wfopen_s(&pFile, wFilename, wMode);
+        free(wFilename);
+        free(wMode);
+
+        return err ? NULL : pFile;
     }
 
     static int mz_stat(const char *pFilename, struct _stat64 *file_stat)
     {
         FILE* pFile = NULL;
-        wchar_t* pFilenameW = utf8_to_wchar(pFilename);
+        wchar_t* pFilenameW = mz_utf8z_to_widechar(pFilename);
         int errcode = _wstat64(pFilenameW, file_stat);
         MZ_FREE(pFilenameW);
         return errcode;
@@ -2897,17 +2885,23 @@ void *tdefl_write_image_to_png_file_in_memory(const void *pImage, int w, int h,
     
     static FILE *mz_freopen(const char *pPath, const char *pMode, FILE *pStream)
     {
-      FILE* pFile = NULL;
-      wchar_t* pFilenameW = utf8_to_wchar(pPath);
-      wchar_t* pModeW = utf8_to_wchar(pMode);
-      if (_wfreopen_s(&pFile, pFilenameW, pModeW, pStream))
-      {
-        pFile = NULL;
-      }
-      MZ_FREE(pFilenameW);
-      MZ_FREE(pModeW);
-      return pFile;
+        WCHAR* wPath = mz_utf8z_to_widechar(pPath);
+        WCHAR* wMode = mz_utf8z_to_widechar(pMode);
+        FILE* pFile = NULL;
+        errno_t err = _wfreopen_s(&pFile, wPath, wMode, pStream);
+        free(wPath);
+        free(wMode);
+        return err ? NULL : pFile;
     }
+
+    static int mz_stat64(const char *path, struct __stat64 *buffer)
+    {
+        WCHAR* wPath = mz_utf8z_to_widechar(path);
+        int res = _wstat64(wPath, buffer);
+        free(wPath);
+        return res;
+    }
+
     #ifndef MINIZ_NO_TIME
       #include <sys/utime.h>
     #endif
@@ -2919,7 +2913,7 @@ void *tdefl_write_image_to_png_file_in_memory(const void *pImage, int w, int h,
     #define MZ_FTELL64 _ftelli64
     #define MZ_FSEEK64 _fseeki64
     #define MZ_FILE_STAT_STRUCT _stat64
-    #define MZ_FILE_STAT mz_stat
+    #define MZ_FILE_STAT mz_stat64
     #define MZ_FFLUSH fflush
     #define MZ_FREOPEN mz_freopen
     #define MZ_DELETE_FILE remove
