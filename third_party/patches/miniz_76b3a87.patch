--- miniz_76b3a87/miniz.h	2022-06-19 23:44:50.000000000 -0400
+++ third_party/miniz.h	    2022-06-19 23:46:51.000000000 -0400
@@ -1127,8 +1127,9 @@
 typedef struct
 {
     mz_uint64 m_archive_size;
+    mz_uint64 m_archive_file_ofs;
     mz_uint64 m_central_directory_file_ofs;
 
     /* We only support up to UINT32_MAX files in zip64 mode. */

--- miniz_76b3a87/miniz.c	2022-06-19 23:44:50.000000000 -0400
+++ third_party/miniz.c	    2022-06-20 00:06:13.000000000 -0400
@@ -3598,6 +3598,7 @@
     mz_int64 cur_file_ofs;
     mz_uint32 buf_u32[4096 / sizeof(mz_uint32)];
     mz_uint8 *pBuf = (mz_uint8 *)buf_u32;
+    mz_bool zip_signature_found = 0;
 
     /* Basic sanity checks - reject files which are too small */
     if (pZip->m_archive_size < record_size)
@@ -3614,25 +3615,28 @@
 
         for (i = n - 4; i >= 0; --i)
         {
-            mz_uint s = MZ_READ_LE32(pBuf + i);
-            if (s == record_sig)
-            {
-                if ((pZip->m_archive_size - (cur_file_ofs + i)) >= record_size)
-                    break;
+            if (MZ_READ_LE32(pBuf + i) == MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG) {
+                // Read and verify the end of central directory record
+                if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs + i, pBuf, MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE) != MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE)
+                    continue;
+                if ((MZ_READ_LE32(pBuf + MZ_ZIP_ECDH_SIG_OFS) != MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG) ||
+                    ((pZip->m_total_files = MZ_READ_LE16(pBuf + MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS)) != MZ_READ_LE16(pBuf + MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS)))
+                    continue;
+                zip_signature_found = 1;
+                break;
             }
         }
 
-        if (i >= 0)
-        {
+        if (zip_signature_found) {
             cur_file_ofs += i;
             break;
         }
 
         /* Give up if we've searched the entire file, or we've gone back "too far" (~64kb) */
-        if ((!cur_file_ofs) || ((pZip->m_archive_size - cur_file_ofs) >= (MZ_UINT16_MAX + record_size)))
+        if ((!cur_file_ofs) || (cur_file_ofs < MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE))
             return MZ_FALSE;
 
-        cur_file_ofs = MZ_MAX(cur_file_ofs - (sizeof(buf_u32) - 3), 0);
+        cur_file_ofs = MZ_MAX(cur_file_ofs - (mz_int64)(sizeof(buf_u32) - 3), 0);
     }
 
     *pOfs = cur_file_ofs;
@@ -3697,7 +3701,7 @@
     num_this_disk = MZ_READ_LE16(pBuf + MZ_ZIP_ECDH_NUM_THIS_DISK_OFS);
     cdir_disk_index = MZ_READ_LE16(pBuf + MZ_ZIP_ECDH_NUM_DISK_CDIR_OFS);
     cdir_size = MZ_READ_LE32(pBuf + MZ_ZIP_ECDH_CDIR_SIZE_OFS);
-    cdir_ofs = MZ_READ_LE32(pBuf + MZ_ZIP_ECDH_CDIR_OFS_OFS);
+    cdir_ofs = cur_file_ofs - cdir_size;
 
     if (pZip->m_pState->m_zip64)
     {
@@ -3751,6 +3755,10 @@
 
     pZip->m_central_directory_file_ofs = cdir_ofs;
 
+    pZip->m_archive_file_ofs = cdir_ofs - MZ_READ_LE32(pBuf + MZ_ZIP_ECDH_CDIR_OFS_OFS);
+    if (pZip->m_archive_file_ofs > pZip->m_archive_size)
+        return MZ_FALSE;
+
     if (pZip->m_total_files)
     {
         mz_uint i, n;
@@ -4044,13 +4052,12 @@
     file_size = archive_size;
     if (!file_size)
     {
-        if (MZ_FSEEK64(pFile, 0, SEEK_END))
-        {
-            MZ_FCLOSE(pFile);
+        struct MZ_FILE_STAT_STRUCT file_stat;
+        if (0 != MZ_FILE_STAT(pFilename, &file_stat)) {
             return mz_zip_set_error(pZip, MZ_ZIP_FILE_SEEK_FAILED);
         }
 
-        file_size = MZ_FTELL64(pFile);
+        file_size = file_stat.st_size;
     }
 
     /* TODO: Better sanity check archive_size and the # of actual remaining bytes */
@@ -4514,7 +4521,7 @@
         return mz_zip_set_error(pZip, MZ_ZIP_BUF_TOO_SMALL);
 
     /* Read and parse the local directory entry. */
-    cur_file_ofs = file_stat.m_local_header_ofs;
+    cur_file_ofs = pZip->m_archive_file_ofs + file_stat.m_local_header_ofs;
     if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pLocal_header, MZ_ZIP_LOCAL_DIR_HEADER_SIZE) != MZ_ZIP_LOCAL_DIR_HEADER_SIZE)
         return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);
 
@@ -7036,7 +7043,7 @@
     if (!mz_zip_file_stat_internal(pSource_zip, src_file_index, pSrc_central_header, &src_file_stat, NULL))
         return MZ_FALSE;
 
-    cur_src_file_ofs = src_file_stat.m_local_header_ofs;
+    cur_src_file_ofs = pSource_zip->m_archive_file_ofs + src_file_stat.m_local_header_ofs;
     cur_dst_file_ofs = pZip->m_archive_size;
 
     /* Read the source archive's local dir header */
