
/**

\defgroup MicroServices Micro Services Classes

\brief This category includes classes related to the C++ Micro Services component.

The C++ Micro Services component provides a dynamic service registry based on the service layer
as specified in the OSGi R4.2 specifications.

*/

/**

\defgroup MicroServicesUtils Utility Classes

\brief This category includes utility classes which can be used by others.

*/

/**

\defgroup MicroServicesCMake CMake Functions

\brief This category includes CMake utility functions for external projects.

External projects can include the CMake scripts provided by the CppMicroServices
library to automatically generate bundle initialization code and to embed external resources
into a bundles shared library.

*/

/**

\page MicroServices_Tutorials Tutorial

This tutorial creates successively more complex bundles to illustrate
most of the features and functionality offered by the C++ Micro Services library.
It is heavily base on the Apache Felix OSGi Tutorial.

- \subpage MicroServices_Example1
- \subpage MicroServices_Example2
- \subpage MicroServices_Example2b
- \subpage MicroServices_Example3
- \subpage MicroServices_Example4
- \subpage MicroServices_Example5
- \subpage MicroServices_Example6
- \subpage MicroServices_Example7

*/

/**

\page MicroServices_UserDocs User Documentation

This is a list of available documentation for different aspects of the C++
Micro Services library:

\if us_standalone
- \subpage BuildInstructions
- \subpage MicroServices_GettingStarted
\endif
- \subpage MicroServices_TheBundleContext
- \subpage MicroServices_Resources
- \subpage MicroServices_BundleProperties
- \subpage MicroServices_ServiceHooks
- \subpage MicroServices_StaticBundles
- \subpage MicroServices_EmulateSingleton

*/

/**

\embmainpage{MicroServices_Overview} The C++ Micro Services

The C++ Micro Services library provides a dynamic service registry based on the service layer
as specified in the OSGi R4.2 specifications. It enables users to realize a service oriented
approach within their software stack. The advantages include higher reuse of components, looser
coupling, better organization of responsibilities, cleaner API contracts, etc.

\if us_standalone
\section MicroServices_Overview_BI Build Instructions

How to build the C++ Micro Services library is explained in detail on the \ref BuildInstructions page.
\endif

<h1>Tutorial</h1>

\if us_standalone
Here is a list of \ref MicroServices_Tutorials "tutorial examples"
\else
Here is a list of \subpage MicroServices_Tutorials "tutorial examples"
\endif
which create successively more complex bundles to illustrate most of the features and
functionality offered by the C++ Micro Services library:

- \ref MicroServices_Example1
- \ref MicroServices_Example2
- \ref MicroServices_Example2b
- \ref MicroServices_Example3
- \ref MicroServices_Example4
- \ref MicroServices_Example5
- \ref MicroServices_Example6
- \ref MicroServices_Example7

<h1>User Documentation</h1>

The links in the following list point to important
\if us_standalone
\ref MicroServices_UserDocs "user documentation":
\else
\subpage MicroServices_UserDocs "user documentation":
\endif

\if us_standalone
- \ref BuildInstructions
- \ref MicroServices_GettingStarted
\endif
- \ref MicroServices_TheBundleContext
- \ref MicroServices_Resources
- \ref MicroServices_BundleProperties
- \ref MicroServices_ServiceHooks
- \ref MicroServices_StaticBundles
- \ref MicroServices_EmulateSingleton

*/
